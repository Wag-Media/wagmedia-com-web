generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum ContentType {
    news
    article
}

model Post {
    id      String @id
    title   String
    content String
    slug    String @unique @default(uuid())
    userId  Int
    user    User   @relation(fields: [userId], references: [id])

    reactions  Reaction[]
    categories Category[]
    tags       Tag[]      @relation("PostTags")

    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    firstPaymentAt DateTime?
    isPublished    Boolean   @default(false)
    isFeatured     Boolean   @default(false)
    isDeleted      Boolean   @default(false)

    discordLink String? // Discord link to the original post, if applicable
    embeds      Embed[]

    // earnings associated with this post
    earnings ContentEarnings[]

    // Payments directly associated with this post
    payments Payment[] @relation(name: "PaymentPost")

    parentPostId   String? // Foreign key for Post
    // Payments associated with threads under this post
    threadPayments Payment[]    @relation(name: "PaymentThreadParent")
    contentType    ContentType? // Nullable field for post type
}

model OddJob {
    id              String @id
    role            String
    description     String
    timeline        String
    requestedAmount Float
    requestedUnit   String

    isDeleted Boolean @default(false)

    reactions Reaction[]
    payments  Payment[]

    managerId String
    manager   User   @relation(name: "ManagerUser", fields: [managerId], references: [discordId])

    userId String
    User   User   @relation(name: "PostedUser", fields: [userId], references: [discordId])

    discordLink String? // Discord link to the original post, if applicable

    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    firstPaymentAt DateTime?
    earnings       ContentEarnings[]

    attachments Attachment[]
}

model ContentEarnings {
    id          Int    @id @default(autoincrement())
    totalAmount Float  @default(0)
    unit        String // e.g., "USD", "DOT"

    postId String? // Foreign key for Post
    post   Post?   @relation(fields: [postId], references: [id])

    oddJobId String? // Foreign key for OddJob
    oddJob   OddJob? @relation(fields: [oddJobId], references: [id])

    @@unique([postId, unit])
    @@unique([oddJobId, unit])
}

model User {
    id               Int        @id @default(autoincrement())
    discordId        String     @unique
    posts            Post[]
    reactions        Reaction[]
    avatar           String?
    avatarDecoration String?
    banner           String?
    accentColor      String?
    bio              String?
    name             String?
    Payment          Payment[]
    domain           String?
    twitterUsername  String?
    roles            String[]   @default([])

    oddjobsposted  OddJob[] @relation(name: "PostedUser")
    oddjobsmanaged OddJob[] @relation(name: "ManagerUser")
}

model Reaction {
    id            Int    @id @default(autoincrement())
    emojiId       String
    emoji         Emoji  @relation(fields: [emojiId], references: [id])
    userDiscordId String
    user          User   @relation(fields: [userDiscordId], references: [discordId])

    postId String?
    post   Post?   @relation(fields: [postId], references: [id])

    oddJobId String?
    OddJob   OddJob? @relation(fields: [oddJobId], references: [id])

    createdAt        DateTime  @default(now())
    initiatesPayment Boolean   @default(false)
    Payment          Payment[]

    @@unique([postId, userDiscordId, emojiId])
    @@unique([oddJobId, userDiscordId, emojiId])
}

model Category {
    id           Int            @id @default(autoincrement())
    name         String         @unique
    posts        Post[]
    emojiId      String         @unique
    emoji        Emoji          @relation(fields: [emojiId], references: [id])
    CategoryRule CategoryRule[]
}

model Emoji {
    id String @id

    name       String? // Name of the emoji, especially important for custom emojis
    emojiChar  String? // For standard unicode emojis
    discordId  String?  @unique // Unique ID for custom Discord emojis
    isAnimated Boolean? // Whether the custom emoji is animated
    url        String? // URL of the emoji image

    reactions Reaction[]
    category  Category?

    reactionId   Int?
    categoryId   Int?
    PaymentRule  PaymentRule[]
    CategoryRule CategoryRule[]
}

model Tag {
    id    Int    @id @default(autoincrement())
    name  String @unique
    posts Post[] @relation("PostTags")
}

model LastProcessedPost {
    channelId String   @id
    postId    String
    updatedAt DateTime @updatedAt
}

// A payment is a record of a power user paying for a post they reacted to
model Payment {
    id            Int     @id @default(autoincrement())
    amount        Float // e.g., 1.5
    unit          String // e.g., "USD", "ETH", "DOT"
    status        String // e.g., "pending", "completed"
    fundingSource String? // e.g. the proposal ID for a treasury proposal

    postId String?
    Post   Post?   @relation(name: "PaymentPost", fields: [postId], references: [id])

    oddJobId String?
    OddJob   OddJob? @relation(fields: [oddJobId], references: [id])

    // Parent post of the thread where the payment occurred
    threadParentId String?
    threadParent   Post?   @relation(name: "PaymentThreadParent", fields: [threadParentId], references: [id])

    userId     Int
    user       User     @relation(fields: [userId], references: [id])
    reactionId Int
    reaction   Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([postId, userId, reactionId])
}

// Rules for how much to pay for a given reaction
model PaymentRule {
    id            Int     @id @default(autoincrement())
    emojiId       String  @unique
    emoji         Emoji   @relation(fields: [emojiId], references: [id])
    paymentAmount Float
    paymentUnit   String
    fundingSource String? @default(uuid()) // e.g. the proposal ID for a treasury proposal

    @@unique([paymentAmount, paymentUnit, fundingSource])
}

// Rules for which category a post belongs to
model CategoryRule {
    id         Int      @id @default(autoincrement())
    emojiId    String   @unique
    emoji      Emoji    @relation(fields: [emojiId], references: [id])
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])
}

model Embed {
    id         String   @id @default(uuid())
    embedUrl   String?
    embedImage String?
    width      Int?
    height     Int?
    embedColor Int?
    postId     String
    post       Post     @relation(fields: [postId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Attachment {
    id        String   @id @default(uuid())
    oddJobId  String // Foreign key for OddJob
    name      String // Original file name
    url       String // URL to access the file, if stored externally
    mimeType  String // MIME type of the file, e.g., "image/png"
    size      Int // File size in bytes
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    data Bytes? // Optional: store the file data directly in the database

    oddJob OddJob @relation(fields: [oddJobId], references: [id]) // Relation to OddJob

    @@index([oddJobId]) // Optional: improve query performance
}
